
@page "/mods"

@inherits ModListPageBase

<div class="umod-main-body ultra-wide">

    <h2>Mods List</h2>

    <hr />
    <div style="max-width:350px">
        <Blazorise.Select Style="margin: 4px auto"
                          TValue="string" SelectedValue="@selectedGame" SelectedValueChanged="@OnGameSelected">

            <SelectItem Value="@("")"> - Select Game - </SelectItem>

            @foreach (string g in this.Games)
            {
                <SelectItem Value="@g">@g</SelectItem>
            }
        </Blazorise.Select>

        <TextEdit Style="margin: 4px auto" Text="@modsFilterQuery" TextChanged="@OnFilterQueryChanged"
                  Placeholder="Filter Mods" />
        <br />

        @*<table width="100%">
            <tr>
                <td width="40px">
                    <Tooltip Text="@("(Currently the installer only works\nfor Steam games)")"
                             Placement="Placement.Right">
                        <Blazorise.Icon IconStyle="IconStyle.Regular" Name="IconName.QuestionCircle"></Blazorise.Icon>
                    </Tooltip>
                </td>
                <td>
                    <Switch TValue="bool" Checked="@IsSteamGame" Disabled="true" CheckedChanged="(e => OnFilterSwitchChanged( SwitchOption.Steam, e))">
                        Steam Version
                    </Switch>
                </td>
            </tr>
        </table>*@
       @* <table width="100%">
            <tr>
                <td width="40px">
                    <Tooltip Text="@DlcTooltip" 
                             Placement="TooltipPlacement.Right">
                        <Blazorise.Icon IconStyle="IconStyle.Regular" Name="IconName.QuestionCircle"></Blazorise.Icon>
                    </Tooltip>
                </td>
                <td>
                    <Switch TValue="bool" Checked="@HasAllDlc" CheckedChanged="(e => OnFilterSwitchChanged( SwitchOption.DLC, e))">
                        I have all DLC
                    </Switch>
                </td>
            </tr>
        </table>*@
        @*<table width="100%">
                <tr>
                    <td width="40px">
                        <Tooltip Text="@("Min Spec:\n- Intel i5 Quad Core\n- Nvidia GTX 1060\n- 8GB DDR4\n- (or equivalent)")"
                                 Placement="Placement.Right">
                            <Blazorise.Icon IconStyle="IconStyle.Regular" Name="IconName.QuestionCircle"></Blazorise.Icon>
                        </Tooltip>
                    </td>
                </tr>
            </table>*@
    </div>

    <LoadingSpinner Hidden="(MasterList != null)" Centred="true" Height="100" Width="100" />

    <br />

    <div hidden="@(GameMods.Count == 0)">

        <div class="modlistCount">
            Found: @this.FilteredMods.Count mods
        </div>

        @foreach (var m in FilteredMods)
        {
            <div class="modlistItem">
                <div class="modlistTitle">
                    @m.ModName
                    @if (m.IsEssential)
                    {
                        <span class="modlistItemEssential">ESSENTIAL</span>
                    }
                </div>
                <div class="modlistCreatorLink">
                    @if (!string.IsNullOrEmpty(m.CreatedBy) && !string.IsNullOrEmpty(m.CreatorUrl))
                    {
                        <a class="modlistCreatorLink" href="@m.CreatorUrl" target="_blank">Created by: @m.CreatedBy</a>
                    }
                    else if (!string.IsNullOrEmpty(m.CreatedBy))
                    {
                        <span class="modlistCreatorLink">Created by: @m.CreatedBy</span>
                    }
                </div>
                <div>
                    <h6>Total Files: @m.Files.Count</h6>
                    @foreach (var f in m.Files)
                    {
                        <div class="modlistFile">
                            <div class="modlistFilename">
                                @f.FileName
                            </div>
                            <div class="modlistDownloadLink">
                                @if (!string.IsNullOrEmpty(f.DirectDownloadUrl))
                                {
                                    <Button class="umod-btn" Clicked="@(() => OpenLink(f.DirectDownloadUrl))">Download</Button>
                                }
                                else
                                {
                                    <Button class="umod-btn" Clicked="@(() => OpenLink(f.ManualDownloadUrl))">Download</Button>
                                }
                            </div>
                            <hr />
                            <div class="modlistFileContents">
                                <div>
                                    The below file content is extracted to:
                                </div>
                                <div class="modlistExtractlocation">
                                    @f.ExtractLocationString($"/(your {this.selectedGame} folder)")
                                </div>
                                <ul>
                                    @foreach (var c in f.Content.OrderBy(c => c.InstallOrder))
                                    {
                                        string allContents = "[all contents]";
                                        <li class="modlistContentfileName">@c.FileName.Replace("**", allContents).Replace("*", allContents)</li>
                                    }
                                </ul>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

    </div>

    <div hidden="@(GameMods.Count > 0)">
        @if (string.IsNullOrEmpty(this.selectedGame))
        {
            <h4>Please select a game</h4>
        }
        else
        {
            <h4>No Results!</h4>
        }
    </div>

</div>

@code {



    U_Mod.Shared.Enums.GamesEnum GameEnum { get; set; }
    public List<string> Games { get; set; } = new List<string>();
    string selectedGame { get; set; }
    string DlcTooltip => GetDlcTooltip();
    void OnGameSelected(string g)
    {
        selectedGame = g;

        GameEnum = this.MasterList.Games.FirstOrDefault(g => g.GameName == selectedGame)?.Game ?? GamesEnum.Unknown;

        System.Diagnostics.Debug.WriteLine($"Select {g}");

        this.GameMods = this.MasterList.Games
                            .FirstOrDefault(g => g.Game == GameEnum)?
                            .Mods.ToList() 
                            ?? new List<Mod>();

        modsFilterQuery = "";

        OnFilterQueryChanged(this.modsFilterQuery);
    }

    List<Mod> GameMods { get; set; } = new List<Mod>();
    List<Mod> FilteredMods { get; set; } = new List<Mod>();

    string modsFilterQuery { get; set; }
    void OnFilterQueryChanged(string q)
    {
        modsFilterQuery = q;

        if (string.IsNullOrEmpty(modsFilterQuery))
        {
            this.FilteredMods = new List<Mod>(this.GameMods.Where(m => UserCanInstall(m)));
        }
        else
        {
            this.FilteredMods = this.GameMods.Where(m =>
            UserCanInstall(m) && m.ModName.ToLower().Contains(q.ToLower()))
            .OrderByDescending(m => m.ModName.ToLower().StartsWith(q.ToLower()))
            .ThenByDescending(m => m.ModName.ToLower().Contains(q.ToLower()))
            .ToList();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {

            this.Games = MasterList.Games.Select(g => g.GameName).ToList();

        }
        catch (Exception e)
        {
            System.Diagnostics.Debug.WriteLine(StringHelpers.ErrorMessage(e));
        }

    }

    public bool IsSteamGame { get; set; } = true;
    public bool HasAllDlc { get; set; } = true;
    public bool CanFullInstall { get; set; } = true; // Always true. This is leftover from Levi's installer.
    public InstallProfileEnum InstallProfile =>
    (this.HasAllDlc ? InstallProfileEnum.AllDlc : InstallProfileEnum.NoDlc) |
    (this.IsSteamGame ? InstallProfileEnum.Steam : InstallProfileEnum.NonSteam);

    public bool UserCanInstall(Mod m)
    {

        return (m.IsFullInstallOnly && this.CanFullInstall || !m.IsFullInstallOnly)
        && ((m.InstallProfile & this.InstallProfile) == this.InstallProfile
            || (m.InstallProfile & InstallProfileEnum.NoData) == InstallProfileEnum.NoData);
    }

    void OnFilterSwitchChanged(SwitchOption opt, bool newVal)
    {
        switch (opt)
        {
            case SwitchOption.Steam:
                this.IsSteamGame = newVal;
                break;
            case SwitchOption.DLC:
                this.HasAllDlc = newVal;
                break;
        }

        //do this to update list
        OnFilterQueryChanged(this.modsFilterQuery);
    }

    string GetDlcTooltip()
    {

        try
        {
            if (this.MasterList != null)
                GameEnum = this.MasterList.Games.FirstOrDefault(g => g.GameName == selectedGame)?.Game ?? GamesEnum.Unknown;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        
        return GameEnum switch
        {
            GamesEnum.Oblivion => " Oblivion DLC:\n- Battlehorn Castle\n- Shivering Isles\n- Knights of the Nine\n- Frost Crag\n- Horse Armor\n- Mehrunes Razor\n- Orrery\n- Spell Tomes\n- Thieves Den\n- Vile Lair",
            GamesEnum.Fallout => "Fallout DLC:\n- Anchorage\n- BrokenSteel\n- PointLookout\n- ThePitt\n- Zeta",
            GamesEnum.NewVegas => "New Vegas DLC: \n- CaravanPack\n- ClassicPack\n- DeadMoney\n- GunRunnersArsenal\n- HonestHearts\n- LonesomeRoad\n- MercenaryPack\n- OldWorldBlues\n- TribalPack",
            GamesEnum.Skyrim => "Skyrim DLC: \n- Hearthfires\n- Dragonborn\n- Dawnguard\n- Creation Club: Survival Mode\n- Creation Club: Curios\n- Creation Club: Adv DSGS\n- Creation Club: Fishing",
            _ => "This tooltip will show DLC content after\nyou have selected a game\n from the options above"
        };
    }

    [Inject]
    IJSRuntime ThisJsRuntime { get; set; }

    private async void OpenLink(string url)
    {
        await ThisJsRuntime.InvokeVoidAsync("openExternalUrlTab", url);
    }

    enum SwitchOption
    {
        Steam,
        DLC,
        FullInstall
    }
}
