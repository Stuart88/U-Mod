
@page "/interactive/dodger-game"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D

@inject IJSRuntime JsRuntime;

<div class="umod-main-body ultra-wide" style="height:100%">

    <h2>Dodger</h2>
    <hr />

    <img @ref="_spritesheet" hidden src="@ServerHelpers.ImageSrcString("icons/icons_acid-house.png")" />
    <div id="canvasContainer" style="position: relative; opacity: 1; background-color: black; width: 100%; height: 100%">
        <BECanvas @ref="_canvasReference" ></BECanvas>
    </div>
</div>

@code {

    BECanvasComponent _canvasReference = null;
    Canvas2DContext _context;
    ElementReference _spritesheet;

    [JSInvokable]
    public async ValueTask DodgerGameLoop(float timeStamp, int width, int height)
    {
        await _context.ClearRectAsync(0, 0, width, height);

        await _context.DrawImageAsync(_spritesheet, 0, 0, width / 2, height / 2);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await JsRuntime.InvokeAsync<object>("dodgerInitGame", DotNetObjectReference.Create(this));
        _context = await _canvasReference.CreateCanvas2DAsync();

    }
}
